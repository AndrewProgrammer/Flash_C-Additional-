#include <iostream>
#include <windows.h>
#include <conio.h>
#include <ctime>

HANDLE H = GetStdHandle(STD_OUTPUT_HANDLE);
HWND hwnd = GetConsoleWindow();
HDC hdc = GetDC(hwnd);
int playerPoints = 0;
int pcPoints = 0;

using namespace std;

void Web ();
void X (int x, int y);
void O (int x, int y);
int Winner (int gameField [3][3], int n);
void main ();

void main ()
{
	HWND hwnd = GetConsoleWindow();
	HDC hdc = GetDC(hwnd);

	system ("color 1f");
	setlocale (0, "rus");
	srand ((int) time (0));
	system ("title Крестики-Нолики");
	system("mode con cols=85 lines=30");

	COORD kords;
	
	int gameField [3][3] = {0};
	//0-empty, 1-X(player), 2-O(PC)

	DWORD size=1024;
	char user[1024];
	GetUserNameA(user, &size); 

	Web();

	kords.X = 38;
	kords.Y = 3;
	SetConsoleCursorPosition(H, kords);
	cout <<pcPoints <<"  :  " <<playerPoints;
	kords.X = 29;
	kords.Y = 3;
	SetConsoleCursorPosition(H, kords);
	SetConsoleTextAttribute(H, 28);
	cout <<"PC";
	kords.X = 51;
	kords.Y = 3;
	SetConsoleCursorPosition(H, kords);
	SetConsoleTextAttribute(H, 26);
	cout <<user;

	kords. X = 41;
	kords. Y = 15;

	int x = 1;
	int y = 1;

	for (int q = 0; ;)
	{
		SetConsoleCursorPosition(H, kords);

		int k = _getch();
		if (k == 0 || k == 224)
		{
			k = _getch();
		}
		if (k == 77 && kords.X < 45)//right
		{
			kords. X += 8;
			x++;
		}
		if (k == 75 && kords. X > 35)//left
		{
			kords. X -= 8;
			x--;
		}
		if (k == 72 && kords. Y > 10)//up
		{
			kords. Y -= 5;
			y--;
		}
		if (k == 80 && kords. Y < 20)//down
		{
			kords. Y += 5;
			y++;
		}
		if (k == 32 && gameField [y][x] == 0)//space
		{
			X (x, y);

			gameField [y][x] = 1; //ячейке присваивается значение крестика - 1
			
				if (gameField [0][0] == 2 && gameField [1][0] == 2 && gameField [2][0] == 0 || gameField [2][2] == 2 && gameField [2][1] == 2 && gameField [2][0] == 0 ||
					gameField [0][2] == 2 && gameField [1][1] == 2 && gameField [2][0] == 0)
				{
					gameField [2][0] = 2;
					O (0, 2);
				}
				else if (gameField [0][0] == 2 && gameField [0][1] == 2 && gameField [0][2] == 0 || gameField [2][2] == 2 && gameField [1][2] == 2 &&  gameField [0][2] == 0 ||
						gameField [2][0] == 2 && gameField [1][1] == 2 && gameField [0][2] == 0)
				{
					gameField [0][2] = 2;
					O (2, 0);
				}
				else if (gameField [0][0] == 2 && gameField [2][0] == 2 && gameField [1][0] == 0 || gameField [1][2] == 2 && gameField [1][1] == 2 && gameField [1][0] == 0)
				{
					gameField [1][0] = 2;
					O (0, 1);
				}
				else if (gameField [0][0] == 2 && gameField [0][2] == 2 && gameField [0][1] == 0 || gameField [2][1] == 2 && gameField [1][1] == 2 && gameField [0][1] == 0)
				{
					gameField [0][1] = 2;
					O (1, 0);
				}
				else if (gameField [0][0] == 2 && gameField [1][1] == 2 && gameField [2][2] == 0 || gameField [2][0] == 2 && gameField [2][1] == 2 && gameField [2][2] == 0 ||
					gameField [0][2] == 2 && gameField [1][2] == 2 && gameField [2][2] == 0)
				{
					gameField [2][2] = 2;
					O (2, 2);
				}
				else if (gameField [0][0] == 2 && gameField [2][2] == 2 && gameField [1][1] == 0 || gameField [0][2] == 2 && gameField [2][0] == 2 && gameField [1][1] == 0 ||
					gameField [0][1] == 2 && gameField [2][1] == 2 && gameField [1][1 == 0] || gameField [1][0] == 2 && gameField [1][2] == 2 && gameField [1][1] == 0)
				{
					gameField [1][1] = 2;
					O (1, 1);
				}
				else if (gameField [2][0] == 2 && gameField [1][0] == 2 && gameField [0][0] == 0 || gameField [0][2] == 2 && gameField [0][1] == 2 && gameField [0][0] == 0 ||
					gameField [2][2] == 2 && gameField [1][1] == 2 && gameField [0][0] == 0)
				{
					gameField [0][0] = 2;
					O (0, 0);
				}
				else if (gameField [0][1] == 2 && gameField [1][1] == 2 && gameField [2][1] == 0 || gameField [2][0] == 2 && gameField [2][2] == 2 && gameField [2][1] == 0)
				{
					gameField [2][1] = 2;
					O (1, 2);
				}
				else if (gameField [0][2] == 2 && gameField [2][2] == 2 && gameField [1][2] == 0 || gameField [1][0] == 2 && gameField [1][1] == 2 && gameField [1][2] == 0)
				{
					gameField [1][2] = 2;
					O (2, 1);
				}
				//////////////////////////////////////////////////////////////////////////
				else if (gameField [0][0] == 1 && gameField [1][0] == 1 && gameField [2][0] == 0 || gameField [2][2] == 1 && gameField [2][1] == 1 && gameField [2][0] == 0 ||
					gameField [0][2] == 1 && gameField [1][1] == 1 && gameField [2][0] == 0)
				{
					gameField [2][0] = 2;
					O (0, 2);
				}
				else if (gameField [0][0] == 1 && gameField [0][1] == 1 && gameField [0][2] == 0 || gameField [2][2] == 1 && gameField [1][2] == 1 &&  gameField [0][2] == 0 ||
					gameField [2][0] == 1 && gameField [1][1] == 1 && gameField [0][2] == 0)
				{
					gameField [0][2] = 2;
					O (2, 0);
				}
				else if (gameField [0][0] == 1 && gameField [2][0] == 1 && gameField [1][0] == 0 || gameField [1][2] == 1 && gameField [1][1] == 1 && gameField [1][0] == 0)
				{
					gameField [1][0] = 2;
					O (0, 1);
				}
				else if (gameField [0][0] == 1 && gameField [0][2] == 1 && gameField [0][1] == 0 || gameField [2][1] == 1 && gameField [1][1] == 1 && gameField [0][1] == 0)
				{
					gameField [0][1] = 2;
					O (1, 0);
				}
				else if (gameField [0][0] == 1 && gameField [1][1] == 1 && gameField [2][2] == 0 || gameField [2][0] == 1 && gameField [2][1] == 1 && gameField [2][2] == 0 ||
					gameField [0][2] == 1 && gameField [1][2] == 1 && gameField [2][2] == 0)
				{
					gameField [2][2] = 2;
					O (2, 2);
				}
				else if (gameField [0][0] == 1 && gameField [2][2] == 1 && gameField [1][1] == 0 || gameField [0][2] == 1 && gameField [2][0] == 1 && gameField [1][1] == 0 ||
					gameField [0][1] == 1 && gameField [2][1] == 1 && gameField [1][1 == 0] || gameField [1][0] == 1 && gameField [1][2] == 1 && gameField [1][1] == 0)
				{
					gameField [1][1] = 2;
					O (1, 1);
				}
				else if (gameField [2][0] == 1 && gameField [1][0] == 1 && gameField [0][0] == 0 || gameField [0][2] == 1 && gameField [0][1] == 1 && gameField [0][0] == 0 ||
					gameField [2][2] == 1 && gameField [1][1] == 1 && gameField [0][0] == 0)
				{
					gameField [0][0] = 2;
					O (0, 0);
				}
				else if (gameField [0][1] == 1 && gameField [1][1] == 1 && gameField [2][1] == 0 || gameField [2][0] == 1 && gameField [2][2] == 1 && gameField [2][1] == 0)
				{
					gameField [2][1] = 2;
					O (1, 2);
				}
				else if (gameField [0][2] == 1 && gameField [2][2] == 1 && gameField [1][2] == 0 || gameField [1][0] == 1 && gameField [1][1] == 1 && gameField [1][2] == 0)
				{
					gameField [1][2] = 2;
					O (2, 1);
				}
				else
				{
					for (int i = 0; i < 3; i++)
					{
						for (int j = 0; j < 3; j++)
						{
							int a = rand () % 3;
							int b = rand () % 3;
							if (gameField [b][a] == 0)
							{
								gameField [b][a] = 2;
								O (a, b);
								i = 3;
								break;
							}
						}
					}
				}
			}
			if (Winner(gameField, 1) == 1)
			{
				playerPoints++;

				LOGFONT font;

				font.lfHeight =  30;
				font.lfWidth =  0;
				font.lfEscapement = 0;
				font.lfOrientation = 90;
				font.lfWeight = 100;
				font.lfItalic = 0;
				font.lfUnderline = 0;
				font.lfStrikeOut = 0;
				font.lfCharSet = RUSSIAN_CHARSET;
				font.lfOutPrecision = 0;
				font.lfClipPrecision = 0;
				font.lfQuality = 0;
				font.lfPitchAndFamily = 0;
				lstrcpy(font.lfFaceName , L"Calibri");

				HFONT hfont;
				hfont = CreateFontIndirect(&font);

				SetTextColor(hdc,RGB(0,255,0));
				SetBkColor(hdc, RGB (0, 0, 128));

				SelectObject(hdc,hfont);
				TextOutA(hdc,255,270,"Вы победили!!!", 14); 
				
				break;
			}
			else if (Winner(gameField, 2) == 2)
			{
				pcPoints++;
				LOGFONT font;

				font.lfHeight =  30;
				font.lfWidth =  0;
				font.lfEscapement = 0;
				font.lfOrientation = 90;
				font.lfWeight = 100;
				font.lfItalic = 0;
				font.lfUnderline = 0;
				font.lfStrikeOut = 0;
				font.lfCharSet = RUSSIAN_CHARSET;
				font.lfOutPrecision = 0;
				font.lfClipPrecision = 0;
				font.lfQuality = 0;
				font.lfPitchAndFamily = 0;
				lstrcpy(font.lfFaceName , L"Calibri");

				HFONT hfont;
				hfont = CreateFontIndirect(&font);

				SetTextColor(hdc,RGB(255,0,0));
				SetBkColor(hdc, RGB (0, 0, 128));

				SelectObject(hdc,hfont);
				TextOutA(hdc,255,270,"Вы проиграли!!!", 14); 
				break;
			}
			else if (gameField [0][0] != 0 && gameField [0][1] != 0 && gameField [0][2] != 0 && gameField [1][0] != 0 && gameField [1][1] != 0 && gameField [1][2] != 0 &&
					gameField [2][0] != 0 && gameField [2][1] != 0 && gameField [2][2] != 0)
			{
				LOGFONT font;

				font.lfHeight =  30;
				font.lfWidth =  0;
				font.lfEscapement = 0;
				font.lfOrientation = 90;
				font.lfWeight = 100;
				font.lfItalic = 0;
				font.lfUnderline = 0;
				font.lfStrikeOut = 0;
				font.lfCharSet = RUSSIAN_CHARSET;
				font.lfOutPrecision = 0;
				font.lfClipPrecision = 0;
				font.lfQuality = 0;
				font.lfPitchAndFamily = 0;
				lstrcpy(font.lfFaceName , L"Calibri");

				HFONT hfont;
				hfont = CreateFontIndirect(&font);

				SetTextColor(hdc,RGB(255,255,255));
				SetBkColor(hdc, RGB (0, 0, 128));

				SelectObject(hdc,hfont);
				TextOutA(hdc,290,270,"Ничья!!!", 8); 
				break;
			}
		}
		ReleaseDC(hwnd,hdc);
		while (1)
		{
			kords.X = 0;
			kords.Y = 27;
			SetConsoleCursorPosition(H, kords);
			cout <<"Для продолжения нажмите Space\n";
			cout <<"Для выхода нажмите Esc\n";
			int k = _getch();
			if (k == 0 || k == 224)
			{
				k = _getch();
			}
			if (k == 32)
			{
				break;
			}
			if (k == 27)
			{
				return;
			}
		}
		for (int i = 0; i < 26; i++)
		{
			kords.X = 25;
			kords.Y = 7+i;
			SetConsoleCursorPosition(H, kords);
			SetConsoleTextAttribute(H, 0);
			cout <<"                                         \n";
		}
		SetConsoleTextAttribute(H, 7);
		main();
	}

int Winner (int gameField [3][3], int n)
{
		if (gameField [0][0] == n && gameField [0][1] == n && gameField [0][2] == n || gameField [0][0] == n && gameField [1][0] == n && gameField [2][0] == n ||
			gameField [0][0] == n && gameField [1][1] == n && gameField [2][2] == n || gameField [2][0] == n && gameField [2][1] == n && gameField [2][2] == n ||
			gameField [2][0] == n && gameField [1][1] == n && gameField [0][2] == n || gameField [0][2] == n && gameField [1][2] == n && gameField [2][2] == n ||
			gameField [1][0] == n && gameField [1][1] == n && gameField [1][2] == n || gameField [0][1] == n && gameField [1][1] == n && gameField [2][1] == n)
		{
			return n;
		}
		return 0;
}

void O (int x, int y)
{
	HPEN red_pen = CreatePen(PS_SOLID,1,RGB(255, 0, 0));
	HBRUSH black_brush = CreateSolidBrush(RGB(0, 0, 128));

	SelectObject(hdc, red_pen);

	Ellipse(hdc, x*65+250, y*55+100, x*65+285, y*55+135);


	SelectObject(hdc, black_brush);
	
	FloodFill(hdc, x*65+255, y*55+110, RGB (255, 0, 0));

	DeleteObject(red_pen);
	DeleteObject(black_brush);
}

void X (int x, int y)
{
	HPEN green_pen = CreatePen(PS_SOLID,1,RGB(0, 255, 0));
	HBRUSH green_brush = CreateSolidBrush(RGB(0, 255, 0));

	SelectObject(hdc, green_pen);
	SelectObject(hdc, green_brush);

	POINT p;
	MoveToEx(hdc, x*65+250, y*55+100, &p);
	LineTo(hdc, x*65+285, y*55+135);

	MoveToEx(hdc, x*65+285, y*55+100, &p);
	LineTo(hdc, x*65+250, y*55+135);

	DeleteObject(green_pen);
	DeleteObject(green_brush);
}

void Web()
{
	HPEN white_pen = CreatePen(PS_SOLID,1,RGB(255, 255, 255));
	HBRUSH white_brush = CreateSolidBrush(RGB(255, 255, 255));

	SelectObject(hdc, white_pen);
	SelectObject(hdc, white_brush);

	Rectangle(hdc, 300, 95, 305, 255);
	Rectangle(hdc, 360, 95, 365, 255);
	Rectangle(hdc, 245, 140, 420, 145);
	Rectangle(hdc, 245, 200, 420, 205);
	
	DeleteObject(white_pen);
	DeleteObject(white_brush);
}