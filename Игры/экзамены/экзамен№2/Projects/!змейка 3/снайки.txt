//подключение библиотек
#include <iostream> //организация ввода-вывода
#include <stdlib.h> //объявляет функции общего назначения
#include <time.h> //объявляет типы и функции, связанные с датой и временем
#include <conio.h>//консольный ввод-вывод
#include <windows.h>//окрашивание консоли, установка координат
using namespace std; // для cin и cout
HANDLE h=GetStdHandle(STD_OUTPUT_HANDLE);//возвращает дескриптор (идентификатор) окна

//задаем размеры игрового поля
const int _left=0; 
const int _right=60;
const int up=0;
const int down=24;

int level=1;//текущий уровень игры
int snake_length=1;//длина змеи
int apples_count=0;//количество яблок на поле
int speed;//скорость движения змеи

int snake_head_color=10;
int snake_head_body=snake_head_color-8;

struct Point
{ 
	COORD c;//структура координат положения символа в консоли
	char symbol;//собственно сам символ
};

Point * snake;
Point * apple;

COORD rezultat={61,22};//устанавливаем координаты положения результата в консоли
COORD infa={61,5};//устанавливаем координаты положения доп. информации в консоли

int sum=0;//счет игрока

void Level()
{
	SetConsoleTextAttribute(h,7); // стандартный серый цвет
	rezultat.X=61; // координаты нужно возвращать на место - они уезжают, если их увеличивать
	rezultat.Y=22;
	infa.X=61;
	infa.Y=5;

	setlocale(0,"C"); // стандартная кодировка
	system("cls");//очищаем экран
	COORD c; 
	int x,y; 
	bool flag=0; //флаг указывает свободна ли данная клетка	для размещения яблока 

	//прорисовываем границы поля
	for (int i=up; i<down; i++)
	{
		for (int j=_left; j<_right; j++)
		{			
			if (i==up&&j==_left)
				cout <<(char)218; //левый верхний угол
			else if (i==up&&j==_right-1)
				cout <<(char)191;//правый верхний угол
			else if (i==down-1&&j==0)
				cout <<(char)192;//левый нижний угол
			else if (i==down-1&&j==_right-1)
				cout <<(char)217;//правый нижний угол			
			else if (i==up||i==down-1)
				cout<<(char)196;//горизонтальная черта
			else if(j==_left||j==_right-1)
				cout<<(char)179;//вертикальная черта
			else cout <<' ';//остальное заполняем пробелами
		}
		cout <<"\n";
	}

	SetConsoleCursorPosition(h,rezultat);//устанавливаем курсор в положение результата
	setlocale(0,""); // смена кодировки
	SetConsoleTextAttribute(h,4); // тёмно синий цвет
	cout<<"Скушано яблок: ";
	SetConsoleTextAttribute(h,12); // ярко синий цвет
	cout<<sum;//выводим на экран результат игрока
	//setlocale(0,"С"); // смена кодировки на стандартную
	SetConsoleCursorPosition(h,infa);//устанавливаем курсор в положение вывода информации об игровых клавишах
	int color1=1; // первый тёмный оттенок
	int color2=9; // второй светлый оттенок
	SetConsoleTextAttribute(h,color1); // тёмно синий цвет
	cout<<"Движение:";//выводим на экран
	infa.Y+=2;//изменяем координату положения информации
	SetConsoleCursorPosition(h,infa);//опускаемся на строку ниже
	//выводим на экран подсказки об игровых клавишах
	SetConsoleTextAttribute(h,color2);
	cout <<"    "<<(char)24;
	infa.Y++;
	SetConsoleCursorPosition(h,infa);
	cout <<(char)27<<"       "<<(char)26; //выводим стрелки
	infa.Y++;
	SetConsoleCursorPosition(h,infa);
	cout <<"    "<<(char)25;
	infa.Y+=2;
	SetConsoleCursorPosition(h,infa);
	SetConsoleTextAttribute(h,color1);
	cout<<"Пауза - ";
	SetConsoleTextAttribute(h,color2);
	cout<<"Пробел";
	infa.Y+=2;
	SetConsoleCursorPosition(h,infa);
	SetConsoleTextAttribute(h,color1);
	cout<<"Выход - ";
	SetConsoleTextAttribute(h,color2);
	cout<<"Escape";
	infa.Y+=2;
	SetConsoleCursorPosition(h,infa);
	SetConsoleTextAttribute(h,color1);
	cout<<"Скорость - ";
	SetConsoleTextAttribute(h,color2);
	cout<<"Enter";
	infa.Y+=2;

	snake_length=2;//начальная длина змеи равна 2ум
	snake=new Point[snake_length];	//создаем массив размерностью длины змеи
	snake[0].c.X=1;//задаем координату х начального положения головы змеи
	snake[0].c.Y=2;//координата у
	snake[0].symbol=(char)15; //задаем символ головы змеи

	snake[1].c.X=1;//задаем координаты положения хвоста
	snake[1].c.Y=1;
	snake[1].symbol='*';//задаем символ хвоста змеи 
	//устанавливаем количество яблок и скорость движения для каждого уровня игры
	//if (level==1) 
	//{
	apples_count=level*20; // +20 яблок на каждом уровне
	speed=130-level*20;
	if(speed<15) speed=15; // чтобы можно было играть
	//}
	/*else if (level==2) // можно назначать скорость на каждом уровне.. но лучше автоматически - игра бесконечная
	{ 
	apples_count=40;
	speed=90; 
	}
	else if (level==3)
	{ 
	apples_count=80; 
	speed=50; 
	}*/

	//создавем массив длиной равной количеству яблок в данном туре
	apple=new Point[apples_count];
	int n=0; //счетчик размещенных на поле яблок
	while(n<apples_count)//пока не размещены все яблоки
	{ 
		x=rand()%(_right-3)+1;//расчитываем случайные координаты в пределах нашиего поля
		y=rand()%(down-3)+1;// чтоб на рамке не размещалось
		flag=0;//устанавливаем флаг в ноль
		for (int i=0; i<snake_length; i++)
		{
			if (snake[i].c.X==x&&snake[i].c.Y==y)
			{ 
				flag=1; //если координата яблока совпала с положением змеи, устанавливаем флаг в 1
				break;
			}
		}

		if (flag==0)
		{ 
			for (int i=0; i<n; i++)
			{ 
				if (apple[i].c.X==x&&apple[i].c.Y==y)
				{
					flag=1; //если коодината совпала с уже существующим яблоком, устанавливаем флаг в 1
					break;
				}
			}
		}
		if (flag==0)//если координата все-таки свободна - размещаем яблоко
		{ 
			apple[n].c.X=x;
			apple[n].c.Y=y;
			apple[n].symbol=(char)1;
			n++; 
		}
	}
	for (int i=0; i<snake_length; i++)//рисуем змею зеленого цвета
	{
		if(i==0)
			SetConsoleTextAttribute(h,snake_head_color);
		else 
			SetConsoleTextAttribute(h,snake_head_body);
		SetConsoleCursorPosition(h,snake[i].c);
		cout <<snake[i].symbol; 
	}

	SetConsoleTextAttribute(h,12);
	for (int i=0; i<apples_count; i++)//рисуем красные яблоки
	{	
		SetConsoleCursorPosition(h,apple[i].c);//устанавливаем курсор в нужное положение
		cout <<apple[i].symbol;//выводим символ
	}
}

bool Move(int x, int y)
{
	Point  tail; //структура для хвоста
	bool eda=0; //съедено ли яблоко
	bool xarakiri=0;//1, если змея скончалась
	tail=snake[snake_length-1];//хвост - последний элемент массива
	//передвигаем змею 
	for (int i=snake_length-1; i>0; i--)
	{ 
		snake[i].c.X=snake[i-1].c.X;
		snake[i].c.Y=snake[i-1].c.Y;
	}
	//устанавливаем новое положение головы
	snake[0].c.X+=x;
	snake[0].c.Y+=y;
	//последний символ хвоста предыдущего положения изменяем на пробел
	SetConsoleCursorPosition(h,tail.c);
	cout <<' ';
	//перебираем все яблоки
	for (int i=0; i<apples_count; ++i)
	{
		//если змея слопала яблоко
		if (snake[0].c.X==apple[i].c.X&&snake[0].c.Y==apple[i].c.Y)
		{
			apple[i]=apple[apples_count-1];//переставляем значения в массиве
			apples_count--;//изменяем число яблок
			eda=1; //устанавливаем флаг, что змея съела яблоко
			break;
		}
	}
	if (eda==1)
	{
		snake_length++;//изменяем длину змеи
		Point *temp_snake;	//создаем вспомагательный массив для перезаписи	
		temp_snake=new Point [snake_length];
		//копируем массив змеи во временную переменную
		for (int i=0; i<snake_length-1; i++)
			temp_snake[i]=snake[i];
		//удаляем старый массив змеи и создаем новый, большей длины
		delete [] snake;
		snake=new Point[snake_length];
		//заполняем его данными из временной переменной
		for (int i=0; i<snake_length; i++) 
			snake[i]=temp_snake[i]; 
		//освобождаем память временной переменной
		delete [] temp_snake;
		//сдвигаем символы змеи чтобы добавить новый
		if (snake[snake_length-2].c.X>snake[snake_length-3].c.X&&snake[snake_length-2].c.Y==snake[snake_length-3].c.Y)
		{
			snake[snake_length-1].c.X=snake[snake_length-2].c.X+1; 
			snake[snake_length-1].c.Y=snake[snake_length-2].c.Y; 
		}
		else if (snake[snake_length-2].c.X<snake[snake_length-3].c.X&&snake[snake_length-2].c.Y==snake[snake_length-3].c.Y)
		{ 
			snake[snake_length-1].c.X=snake[snake_length-2].c.X-1;
			snake[snake_length-1].c.Y=snake[snake_length-2].c.Y;
		}
		else if (snake[snake_length-2].c.X==snake[snake_length-3].c.X&&snake[snake_length-2].c.Y>snake[snake_length-3].c.Y)
		{
			snake[snake_length-1].c.X=snake[snake_length-2].c.X;
			snake[snake_length-1].c.Y=snake[snake_length-2].c.Y+1; 
		}

		else if (snake[snake_length-2].c.X==snake[snake_length-3].c.X&&snake[snake_length-2].c.Y<snake[snake_length-3].c.Y)
		{
			snake[snake_length-1].c.X=snake[snake_length-2].c.X;
			snake[snake_length-1].c.Y=snake[snake_length-2].c.Y-1;
		}
		//добавляем символ к змее
		snake[snake_length-1].symbol='*';
		//прорисовываем змею в консоли
		for (int i=0; i<snake_length; i++)
		{
			SetConsoleCursorPosition(h,snake[i].c);
			if(i==0)
				SetConsoleTextAttribute(h,snake_head_color);
			else 
				SetConsoleTextAttribute(h,snake_head_body);
			cout <<snake[i].symbol;

		}
		//увеличиваем счет
		sum++; 
		//выводим новый результат на экран
		SetConsoleCursorPosition(h,rezultat);
		setlocale(0,"");
		SetConsoleTextAttribute(h,4);
		cout<<"Скушано яблок: ";
		SetConsoleTextAttribute(h,12);
		cout<<sum;
		setlocale(0,"C");
		return 0; //передаем успешный результат
	}
	//если тело змеи замкнулось
	for (int i=1; i<snake_length-1; i++)
	{ 
		if (snake[0].c.X==snake[i].c.X&&snake[0].c.Y==snake[i].c.Y)
			xarakiri=1;
	}
	//мы проиграли
	if (xarakiri==1)
	{ 
		return 1;
	}

	//если змея вышла за поле
	if (snake[0].c.X==_left||snake[0].c.X==_right-1||snake[0].c.Y==up||snake[0].c.Y==down-1)
	{
		return 1;//передаем результат о проигрыше
	}
	//если мы просто передвигались по полю, изменяем положение змеи и перерисовываем ее
	for (int i=0; i<snake_length; i++)
	{ 
		SetConsoleCursorPosition(h,snake[i].c);
		if(i==0)
			SetConsoleTextAttribute(h,snake_head_color);
		else 
			SetConsoleTextAttribute(h,snake_head_body);
		cout <<snake[i].symbol;

	}
	SetConsoleCursorPosition(h,tail.c);
	cout <<' ';	
	return 0;
}

void NewGame(){
	delete [] snake; 
	delete [] apple;

	char*str=new char[200];
	strcpy(str,"title Snake - Level ");
	char*num=new char[10];
	_itoa(level,num,10); // перевод строки в число
	strcat(str,num);
	system(str); // показать новый заголовок

	Level();
	_getch();
}

void main()
{
	system("title Snake - Level 1");
	srand(time(NULL));//запуск алгоритма генерации случайных чисел
	CONSOLE_CURSOR_INFO cursor;//структура с иформацией о консольном курсоре
	cursor.bVisible=false;//курсор не виден
	cursor.dwSize=100;//устанавливаем размер курсора
	SetConsoleCursorInfo(h,&cursor);//изменяем параметры курсора

	int x=1,y=0; //предположительно змейка полезет направо
	Level();//вызываем процедуру для начала уровня - показ карты, яблок и генерация змеи

	getch(); // змея сама не начинает - ждет пользователя

	while (1)
	{ 
		while (kbhit())//проверяет консоль на ввод нажатие клавиши
		{
			int k=getch();//получаем код нажатой клавиши
			if(k==224||k==0) k=getch(); //если это были стрелки или эфки
			switch (k)//проверяем, какая клавиша нажата
			{
			case 72://вниз
				if (snake[0].c.Y-1==snake[1].c.Y) // если змея и так двигалась вниз (или вверх) ничего не делать
					continue;				
				y=-1; // если нажали вниз после стрелки налево или направо
				x=0;
				break;
			case 80://вверх
				if (snake[0].c.Y+1==snake[1].c.Y)
					continue; 
				y=1; 
				x=0;
				break;
			case 75://влево
				if (snake[0].c.X-1==snake[1].c.X)
					continue; 
				x=-1;  
				y=0;
				break;
			case 77://вправо
				if (snake[0].c.X+1==snake[1].c.X) 
					continue; 
				x=1;
				y=0; 
				break;
			case 32://пробел - пауза
				k=getch();
				while(k!=32)
					k=getch();
				break;
			case 27://выход
				{
					//COORD c={0,24}; 
					//SetConsoleCursorPosition(h,c);
					system("cls");
					setlocale(0,"");
					cout <<"Спасибо что поиграли!";
					getch();
					system("taskkill -im cmd.exe");
					SetConsoleTextAttribute(h,0);
				}
				return;	
			case 13://изменяем скорость движения
				{
					COORD c={60,1}; // место для сообщения
					SetConsoleTextAttribute(h,7); // серый цвет
					SetConsoleCursorPosition(h,c); // установка курсора
					setlocale(0,""); // смена кодировки
					cout <<"Укажи скорость: ";
					SetConsoleTextAttribute(h,15); // белый цвет
					cin >>speed; // скорость в миллисекундах
					SetConsoleCursorPosition(h,c); // повторная установка курсора в эту точку после указания координат
					SetConsoleTextAttribute(h,0); // чёрный цвет
					cout <<"Укажи скорость: 9999"; // затереть всё
					SetConsoleTextAttribute(h,10);
					break;
				}
			}
		} 
		if(Move(x,y)==1)//передаем изменения в положении змеи в процедуру движения, если вернулась 1 - мы проиграли
		{
			//устанавливаем координату в нужное положение, выводим сообщение о проигрыше и прерываем программу
			COORD c={18,23}; 
			SetConsoleCursorPosition(h,c);
			SetConsoleTextAttribute(h,12);
			system("echo  ТЫ ПРОИГРАЛ!!! ПЕЧАЛЬ!!! ");
			getch();
			if(level>1) level--;
			NewGame();
			//break;
		}
		Sleep(speed);
		//если мы успешно собрали все яблоки
		if (apples_count==0)
		{
			level++;//повышаем уговень

			NewGame();

		}
	}
	SetConsoleTextAttribute(h,0);
}