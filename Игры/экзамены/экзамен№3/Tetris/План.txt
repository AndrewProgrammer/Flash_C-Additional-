1.Классы из которых состоит Тетрис : Фигурки,Игра.
2.Управление фигурками.
3.Счетчик очков
4.Перерисовка поля
5.Реакция на заполненную нижнию линию.
Подробности:
Поле - вектор векторов размером (размера поле, ну к примеру 21  на 21)
Фигурка (Абстрактный класс): Разбиение на классы отдельных фигур и задание им применения по умолчанию: Line, J, L, S, Z, T.
(Если сильно хочется можно создать переменную типа unsigned int которая принимает в себя параметр темп и соответсвенно с помощью функции Sleep, взаимодействие с ним в коде при разных условиях и местах применения).
Методы классов:
Фигурка:
Класс Фигурка является абстрактным, который представлен разными классами отдельных фигур, они же представленны своим классом, значит фигурки будут обробатыватся полиморфно.
Фигурки сами себя будут поворачивать, в своих же классах.Фигурки думаю будут представляться в виде вектора векторов. При создании фигурки, надо инициализировать вектор векторов.
Игра:
Конструктор который принимает вектор векторов размером 21х21(Ширину и высоту которые будут вектором векторов фигуры),цвет ширини и высоты, индекс фигуры, индекс рандома фигуры и очки. 
Инициализируем индекс рандома фигуры, индекс фигуры и очки - 0. 
Метод показа нашего поля - void ShowField();
Метод выставление координат нашей фигуры,размера любой фигурки на этом поле 4 на 4, присваивания нашим координатам поля наш размер фигурки, и выставление цвета и показ наших кубиков тоесть char symbolcell = 219  - void SetFigureCoordinates(shared_ptr<Figure> Figure, int Position_XF, int Position_YF);
Метод очистки нашего поля, то есть перерисовка принимает те же параметры что и выставление координат нашей фигуры - void ClearFigureCoordinates(shared_ptr<Figure> Figure, int Position_XF, int Position_YF); //Очистка координат нашего поля
Метод управления и условий для начального старта игры, принимает те же параметры что и выставление координат нашей фигуры - bool ControlsAndStartGame(shared_ptr <Figure> figure, int Position_XF, int Position_YF); // Управление фигурами и стартовые значения для запуска игры
Метод генерирования фигурки. shared_ptr <Figure> nextFigure().
Методы проверок падающей фигурки по нижней гране поля и по расположение слева и справа(между) другими фигурками, принимают в себя все те же параметры что и выставление координат 
bool CheckFigureCoordinatesLeftToRight(shared_ptr<Figure> Figure, int Position_XF, int Position_YF); // проверка нашей фигуры вместе с полем на правильное место расположение между двумя фигурами
bool CheckFigureCoordinatesBottom(shared_ptr<Figure> figure, int Position_XF, int Position_YF); // проверка нашей фигуры на достижение дна поля.
Метод на начисление очков в нашем тетрисе - void ClearLines(); //Очистка заполенной линии и начисление очков 
Метод отображения управления справа от нашего поля - ShowRules()
Реализация: Проверка на пустое место для фигурки.За пределы боковых стенок фигурка не сможет выходить, а до верха накладывание ряда фигурок просто не дойдет, из за проблемы с падением последующей фигуры, которая может выйти за пределы нашей верхней границы поля.
Нижняя грань будет являться барьером для фигурок,при заполнении линии будет удалятся строка фигурок и будет происходит начисление очков,если фигурка достигла конца и на нее сверху падает фигурка и происходит удаление полной линии, то мы сдвигаем наши фигурки на поле на -1.