#include <iostream>
#include <Windows.h>
#include <conio.h>//эта библиотека помимо _getch() подтягивает функцию _kbhit()
using namespace std;

void main()
{
	int width = 50, height = 30;//параметры, отвечающие за ширину и высоту поля
	int xPos = width / 2, yPos = height / 2;//координаты движимого объекта
	int dx = 1, dy = 0;//параметры вектора - приращения по осям координат (по умолчанию вправо)
	//время в миллисекундах, отвечающее за частоту движения объекта
	int sleep_time = 100;
	//символ объекта
	char symbol = 1;
	COORD start={ 0, 0 };//создание объекта координат для хранения позиции старта
	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);//создание "хендла" консоли
	CONSOLE_CURSOR_INFO cci = { sizeof(cci), false };//создаем объект, содержащий настройки для хендла с указанием не отображать курсор
	SetConsoleCursorInfo(h, &cci);//связываем хендл с объектом настройки
	bool flag = true;//переменная, управляющая ходом главного цикла
	do//начало главного цикла
	{
		for (int y = 0; y < height; y++)//начинаем цикл, который будет отвечать за отображение строк
		{
			for (int x = 0; x < width; x++)//вкладываем в цикл выше цикл, отвечающий за печать символов в пределах строки
			{
				char s;//объявляем символ, который будем выводить - осталось выяснить, что это будет за символ
				if (x == 0 && y == 0)//в верхнем левом углу поля - символ соответствующего угла
					s = 218;
				else if (x == 0 && y == height - 1)//нижний левый угол
					s = 192;
				else if (y == 0 && x == width - 1)//верхний правый угол
					s = 191;
				else if (y == height - 1 && x == width - 1)//нижний правый угол
					s = 217;
				else if (y == 0 || y == height - 1)//верхняя и нижняя граница поля
					s = 196;
				else if (x == 0 || x == width - 1)//левая и правая граница поля
					s = 179;
				else if (x == xPos&&y == yPos)//позиция, в которой должен находиться объект
					s = symbol;
				else s = ' ';//во всех остальных случаях должен быть просто пробел (означает пустую область поля)
				putchar(s);//выводим символ
			}
			cout << endl;//после пропечатывания всех символов строки - переходим на следующую строку
		}
		Sleep(sleep_time);//выдерживаем паузу
		if (_kbhit())//проверяем, была ли нажата какая-либо клавиша и запускаем её обработку в случае ИСТИНЫ
		{
			int k = _getch();//считываем код клавиши из буфера
			if (k == 0 || k == 224)//если первый код - вспомогательный, считываем второй код
				k = _getch();
			switch (k)//пропускаем код нажатой клавиши внутрь оператора выбора
			{
			case 80://если была нажата клавиша вниз
				dy = 1;//то приращение по оси ординат будет положительным
				dx = 0;//по оси абсцисс приращение нулевое
				break;
			case 72://если вверх
				dy = -1;//аналогично согласно геометрической логике
				dx = 0;
				break;
			case 75://есди влево
				dy = 0;
				dx = -1;
				break;
			case 77://если вправо
				dy = 0;
				dx = 1;
				break;
			case 27://если была нажата клавиша ESC
				flag = false;//устанавливаем флажок на ЛОЖЬ, чтоб закончить показ движения
				break;
			}
		}
		xPos += dx;//приращаем горизонтальную позицию объекта
		yPos += dy;//приращаем вертикальную
		if (yPos == 0 || yPos == height - 1 || xPos == 0 || xPos == width - 1)//если была достигнута рамка поля
		{
			dx = -dx;//меняем вектор движения на противоположный
			dy = -dy;//для этого меняем знак обоих приращений
			xPos += dx;//как бы двигаем позицию объекта в обратном направлении
			yPos += dy;//чтоб он "ушел" срамки поля 
		}
		SetConsoleCursorPosition(h, start);//отправляем курсор в начало координат консоли
	} while (flag);//выходим из цикла, если была нажата клавиша ESC
	system("cls");//очищаем экран
	cout << "Program is ended\n";//выводим сообщение о конце игры
	//у кого консоль сворачивается сама при выходе из программы - добавляем вспомогательный вызов функции _getch()
}