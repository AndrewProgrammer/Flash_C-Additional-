#include <iostream>
#include <string>
#include <cstring>
#include <Windows.h>//эта библиотека подтягивает функции для управления консолью и отображением
#include <conio.h>//подтягивает функцию _getch()
using namespace std;

void main()
{
	setlocale(0, "ru");
	int choise;
	cout << "Дорогой папочка,сегодня твой день и я решил тебе показать все мои знания в программирование,оцени пожалуйста для этого нажми 0 на клавиатуре\n";
	cin >> choise;
	while (choise < 20)
	{
		cout << '*';
		choise++;
	}
	int choice;
	cout << "Только что программа показала тебе цикл,так как высветилось 20 обозначений '*'\n для продолжения нажми 1 на клавиатуре\n";
	cin >> choice;
	if (choice == 1)
	{
		string str;
		cout << "Программа считывает длину строки до ввода:\n" << str.size() << endl;
		cout << "Программа запрашивает тебя что бы ты написал свое имя на английском языке\n";
		cin >> str;
		cout << "Вы вели :" << str << endl;
		cout << "Теперь программа считает длину строки после ввода:\n" << str.size() << endl;
		string str1 = " Yurievich";
		string str2 = " Lykianchikov";
		string s3;
		s3 = str + str2 + str1;
		cout << "Теперь программа прибавит твою фамилию и отчевство к имеющемусю имени :\n" << s3 << endl;
		cout << "Теперь программа считает длину этой строки:\n" << s3.size() << endl;
	}
	int o;
	cout << "Ну и в завершении я бы хотел чтоб ты 2 или 3 или 4 для того чтобы смог по управлять обьектом на твой выбор,для этого нажми любую стрелочку либо(W, A, S, D),чтобы выйти из этого надо нажать (Esc)\n";
	cin >> o;
	if (o == 2)
	{
		int color = 1;
		bool flag = true;//устанавдиваем логическую переменную для обозначения флажка
		HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);//создаем объект, содержащий информацию о потоке вывода (хендл)
		CONSOLE_CURSOR_INFO cci = { sizeof(cci), false };//создаем объект, содержащий настройки для хендла с указанием не отображать курсор
		SetConsoleCursorInfo(h, &cci);//связываем хендл с объектом настройки
		COORD c = { 5, 22 };//создаем объект для хранения координат на плоскости и устанвливаем их начальные значения
		SetConsoleCursorPosition(h, c);//устанавливаем позицию курсора по заданным координатам
		char s = 3;//создаем символьную переменную, чей символ будем отображать (в данном случае смайл)
		putchar(s);//вызываем функцию вывода символа (процедурный аналог cout, но только для одного символа)
		int dx, dy;//создаем переменные для хранения приращения по осям координат
		do//начинаем цикл с пост-условием
		{
			int k = _getch();//считываем код нажатой клавиши
			if (k == 0 || k == 224)//если была нажата управляющая клавиша
				k = _getch();//то считываем второй код из буфера
			switch (k)//отправляем результат для управления оператором выбора
			{
			case 13:
				SetConsoleTextAttribute(h, ++color);
				break;
			case 'S':
			case 's':
			case 80://если была нажата клавиша вниз
				dy = 1;//то приращение по оси ординат будет положительным
				dx = 0;//по оси абсцисс приращение нулевое
				break;
			case 'W':
			case 'w':
			case 72://если вверх
				dy = -1;//аналогично согласно геометрической логике
				dx = 0;
				break;
			case 'A':
			case 'a':
			case 75://есди влево
				dy = 0;
				dx = -1;
				break;
			case 'D':
			case 'd':
			case 77://если вправо
				dy = 0;
				dx = 1;
				break;
			case 27://если была нажата клавиша ESC
				flag = false;//устанавливаем флажок на ЛОЖЬ
				//break пропускаем специально, чтоб сработал default
			default:
				dx = dy = 0;//если была нажата любая иная клавиша, то приращения равны нулю
			}
			SetConsoleCursorPosition(h, c);//устанавливаем позицию курсор по старым координатам
			putchar(' ');//выводим пробел, чтоб "затереть" наш символ в предыдущей позиции
			c.X += dx;//приращаем абсциссу
			c.Y += dy;//приращаем ординату
			if (c.X<0)//проверяем на выход за левую границу консоли
				c.X = 70;//и устанавливаем минимально допустимое значение абсциссы
			if (c.Y<0)//то же самое для ординаты
				c.Y = 0;
			SetConsoleCursorPosition(h, c);//устанавливаем курсор по новым координатам
			putchar(s);//выводим символ в новой позиции
		} while (flag);//цикл продолжается, пока флажок равен значению ИСТИНА
	}
	else if (o == 3)
	{
		int color = 1;
		bool flag = true;//устанавдиваем логическую переменную для обозначения флажка
		HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);//создаем объект, содержащий информацию о потоке вывода (хендл)
		CONSOLE_CURSOR_INFO cci = { sizeof(cci), false };//создаем объект, содержащий настройки для хендла с указанием не отображать курсор
		SetConsoleCursorInfo(h, &cci);//связываем хендл с объектом настройки
		COORD c = { 5,22  };//создаем объект для хранения координат на плоскости и устанвливаем их начальные значения
		SetConsoleCursorPosition(h, c);//устанавливаем позицию курсора по заданным координатам
		char s = 1;//создаем символьную переменную, чей символ будем отображать (в данном случае смайл)
		putchar(s);//вызываем функцию вывода символа (процедурный аналог cout, но только для одного символа)
		int dx, dy;//создаем переменные для хранения приращения по осям координат
		do//начинаем цикл с пост-условием
		{
			int k = _getch();//считываем код нажатой клавиши
			if (k == 0 || k == 224)//если была нажата управляющая клавиша
				k = _getch();//то считываем второй код из буфера
			switch (k)//отправляем результат для управления оператором выбора
			{
			case 13:
				SetConsoleTextAttribute(h, ++color);
				break;
			case 'S':
			case 's':
			case 80://если была нажата клавиша вниз
				dy = 1;//то приращение по оси ординат будет положительным
				dx = 0;//по оси абсцисс приращение нулевое
				break;
			case 'W':
			case 'w':
			case 72://если вверх
				dy = -1;//аналогично согласно геометрической логике
				dx = 0;
				break;
			case 'A':
			case 'a':
			case 75://есди влево
				dy = 0;
				dx = -1;
				break;
			case 'D':
			case 'd':
			case 77://если вправо
				dy = 0;
				dx = 1;
				break;
			case 27://если была нажата клавиша ESC
				flag = false;//устанавливаем флажок на ЛОЖЬ
				//break пропускаем специально, чтоб сработал default
			default:
				dx = dy = 0;//если была нажата любая иная клавиша, то приращения равны нулю
			}
			SetConsoleCursorPosition(h, c);//устанавливаем позицию курсор по старым координатам
			putchar(' ');//выводим пробел, чтоб "затереть" наш символ в предыдущей позиции
			c.X += dx;//приращаем абсциссу
			c.Y += dy;//приращаем ординату
			if (c.X<0)//проверяем на выход за левую границу консоли
				c.X = 70;//и устанавливаем минимально допустимое значение абсциссы
			if (c.Y<0)//то же самое для ординаты
				c.Y = 0;
			SetConsoleCursorPosition(h, c);//устанавливаем курсор по новым координатам
			putchar(s);//выводим символ в новой позиции
		} while (flag);//цикл продолжается, пока флажок равен значению ИСТИНА
	}
	else if (o == 4)
	{
		int color = 1;
		bool flag = true;//устанавдиваем логическую переменную для обозначения флажка
		HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);//создаем объект, содержащий информацию о потоке вывода (хендл)
		CONSOLE_CURSOR_INFO cci = { sizeof(cci), false };//создаем объект, содержащий настройки для хендла с указанием не отображать курсор
		SetConsoleCursorInfo(h, &cci);//связываем хендл с объектом настройки
		COORD c = { 5, 22 };//создаем объект для хранения координат на плоскости и устанвливаем их начальные значения
		SetConsoleCursorPosition(h, c);//устанавливаем позицию курсора по заданным координатам
		char s = 2;//создаем символьную переменную, чей символ будем отображать (в данном случае смайл)
		putchar(s);//вызываем функцию вывода символа (процедурный аналог cout, но только для одного символа)
		int dx, dy;//создаем переменные для хранения приращения по осям координат
		do//начинаем цикл с пост-условием
		{
			int k = _getch();//считываем код нажатой клавиши
			if (k == 0 || k == 224)//если была нажата управляющая клавиша
				k = _getch();//то считываем второй код из буфера
			switch (k)//отправляем результат для управления оператором выбора
			{
			case 13:
				SetConsoleTextAttribute(h, ++color);
				break;
			case 'S':
			case 's':
			case 80://если была нажата клавиша вниз
				dy = 1;//то приращение по оси ординат будет положительным
				dx = 0;//по оси абсцисс приращение нулевое
				break;
			case 'W':
			case 'w':
			case 72://если вверх
				dy = -1;//аналогично согласно геометрической логике
				dx = 0;
				break;
			case 'A':
			case 'a':
			case 75://есди влево
				dy = 0;
				dx = -1;
				break;
			case 'D':
			case 'd':
			case 77://если вправо
				dy = 0;
				dx = 1;
				break;
			case 27://если была нажата клавиша ESC
				flag = false;//устанавливаем флажок на ЛОЖЬ
				//break пропускаем специально, чтоб сработал default
			default:
				dx = dy = 0;//если была нажата любая иная клавиша, то приращения равны нулю
			}
			SetConsoleCursorPosition(h, c);//устанавливаем позицию курсор по старым координатам
			putchar(' ');//выводим пробел, чтоб "затереть" наш символ в предыдущей позиции
			c.X += dx;//приращаем абсциссу
			c.Y += dy;//приращаем ординату
			if (c.X < 0)//проверяем на выход за левую границу консоли
				c.X = 70;//и устанавливаем минимально допустимое значение абсциссы
			if (c.Y < 0)//то же самое для ординаты
				c.Y = 0;
			SetConsoleCursorPosition(h, c);//устанавливаем курсор по новым координатам
			putchar(s);//выводим символ в новой позиции
		}while (flag);//цикл продолжается, пока флажок равен значению ИСТИНА
	}
	cout << "На этом этапе моим стараниям подошел конец,программа кончается,скажи честно тебе понравилось?Жду ответа!\n";
}