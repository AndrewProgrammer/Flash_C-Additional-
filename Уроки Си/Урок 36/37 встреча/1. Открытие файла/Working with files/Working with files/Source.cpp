#define _CRT_SECURE_NO_WARNINGS
#include <errno.h>
#include <cstdio>
#include <iostream>

using namespace std;


/*
	Для работы с файлами в стандартной библиотеке языка Си содержится ряд функций,
		прототипы этих функций находятся в заголовочном файле cstdio (stdio.h).


	Для того чтобы работать с файлом (читать/записывать) необходимо сначала его открыть для работы.
	Для этого используется функция fopen.

		FILE * fopen ( const char * filename, const char * mode );

		Функция fopen открывает файл, путь к которому передается в filename. Параметр mode 
			отвечает за режим открытия файла.
		Функция возвращает указатель на объект структуры FILE, который описывает открытый файл.
		Или же она может вернуть нулевой указатель в случае неудачного открытия файла.

	Открытый файл является ресурсом ОС. Если Вы открыли файл, после работы с ним его необходимо закрыть.
	Для этого существует функция fclose.

		int fclose ( FILE * stream );

		Функция fclose принимает указатель на объект структуры FILE, который описывает открытый ранее файл.
		И если закрытие произошло успешно, fclose возвращает 0.
		Если же была ошибка возвращается значение EOF.
*/


int main (int argc, char **argv)
{
	char filename[80];
	printf ("Enter file name: ");
	cin.getline(filename, 80);
	FILE *myFile = fopen (filename, "r"); // Функция fopen считается небезопасной в последних версиях компилятора от Microsoft
								// Используйте макроопределение _CRT_SECURE_NO_WARNINGS либо же воспользуйтесь функцией fopen_s
								// У функции fopen_s другой прототип: https://msdn.microsoft.com/en-us/library/z5hh6ee9.aspx
	if (myFile)
	{
		printf ("File opened successfuly!\n");
		fclose (myFile);
	}
	else
	{
		printf ("Cannot open file!\n");
		printf ("Error #%d\n", errno);	// Макрос errno (заголовочный файл errno.h) вызывает функцию _errno: http://www.cplusplus.com/reference/cerrno/errno/
		perror ("Error: "); // Функция печатает текст ошибки, который определен операционной системой
	}


	// fopen (filename, "r");
	/*
		В данном случае открытие файла производилось в режиме r (или rt).

		Существует 2 режима работы с файлами и несколько режимов для открытия файлов.
		Работать с файлами можно в текстовом режиме или в бинарном (двоичном) режиме.
			В текстовом режиме содержимое файла воспринимается как строки текста, разделенные переносами строк.
			В бинарном режиме содержимое файла воспринимается просто как набор байт.

			По умолчанию fopen работает в текстовом режиме. 
			Для явного задания бинарного режима можно воспользоваться буквой "b" в параметре mode.
			Для текстового - буквой "t" в параметре mode.
				Пример: 
					fopen (filename, "rt"); - Открытие файла для чтения в текстовом режиме
					fopen (filename, "r");  - Аналогично вышеописанному
					fopen (filename, "rb"); - Открытие файла для чтения в бинарном режиме



		Режимы открытия файла:
			r - только чтение. Запись запрещена. Файл должен существовать.
			w - только запись. Чтение запрещено. Создает пустой файл. Если файл с таким именем существует,
				то fopen его очистит до нулевой длины. (Всё содержимое файла будет потеряно, и он будет пуст)
			a - запись в конец файла. Если файла не существует, он будет создан. Если файл существует, fopen откроет его
				и ничего очищать не будет. Последующая запись будет дописана в конец файла.
			
			
			r+ - открытие для чтения и записи. Файл должен существовать. Чтение начинается с начала файла.
			w+ - открытие для чтения и записи. Создает пустой файл. Если файл с таким именем существует,
				то fopen его очистит до нулевой длины. (Всё содержимое файла будет потеряно, и он будет пуст)
			a+ - открытие для чтения и записи. Если файла не существует, он будет создан. Если файл существует, fopen откроет его
				и ничего очищать не будет. Последующая запись будет дописана в конец файла.
	*/



}