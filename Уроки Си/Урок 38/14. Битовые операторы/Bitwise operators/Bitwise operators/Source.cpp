#include <cstdio>

void main ()
{
	/*
		Битовые операторы широко применяются в программировании, в особенности, при программировании
			на С/С++.

		Битовые операторы предназначены для взаимодействия с отдельными битами целого числа, а не 
			его значения в целом. (Битовые операторы работают только с целыми числами. Рекомендуется
			их использовать только с unsigned типами, дабы избежать проблем со знаком).

		В число битовых операторов входят:
			1. Битовое "И":							&
			2. Битовое "ИЛИ":						|
			3. Битовое "НЕ":						~
			4. Битовый сдвиг влево:					<<
			5. Битовый сдвиг вправо:				>>
			6. Битовое исключающее "ИЛИ" (xor):		^
	*/

	unsigned myValue = 6;			// Двоичное представление этого числа: 110
	unsigned myValue2 = 117;		// Двоичное представление этого числа: 1110101

	// Рассмотрим каждый оператор подробнее.

	// Битовое "И" (битовое умножение): принимает 2 целых числа. Результат целое число. 
	//		В результирующем числе биты 1 будут только в тех разрядах, где стояли единицы И в первом числе
	//						И во втором.


	//				1 1 0
	//    &
	//		1 1 1 0 1 0 1
	//    =
	//      0 0 0 0 1 0 0 

	printf ("Bitwise 'AND': 6 & 117 = %u\n", myValue & myValue2);



	// Битовое "ИЛИ" (битовое сложение): принимает 2 целых числа. Результат целое число. 
	//		В результирующем числе биты 1 будут в тех разрядах, где стояли единицы ИЛИ в первом числе
	//						ИЛИ во втором.


	//				1 1 0
	//    |
	//		1 1 1 0 1 0 1
	//    =
	//      1 1 1 0 1 1 1 

	printf ("Bitwise 'OR': 6 | 117 = %u\n", myValue | myValue2);


	// Битовое "НЕ" (битовое отрицание): принимает 1 целое число. Результат целое число. 
	//		В результирующем числе биты 1 будут заменены на ноль, а нули на 1.


	//			~	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0
	//    =
	//				1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 

	printf ("Bitwise 'NOT': ~6 = %u\n", ~myValue );


	// Битовый сдвиг влево: принимает 2 целых числа. 
	// Первый операнд - число, биты которого нужно сдвигать.
	// Второй операнд - число, на сколько битов нужно сдвигать.
	//		Биты выходящие за пределы разрядности теряются.
	//		Новые биты заполняются 0.


	//			1 1 0
	//    <<
	//				2
	//	   =
	//		1 1 0 0 0

	printf ("Bitwise left shift by 2 bits: 6 << 2 = %u\n", 6 << 2);


	// Битовый сдвиг вправо: принимает 2 целых числа. 
	// Первый операнд - число, биты которого нужно сдвигать.
	// Второй операнд - число, на сколько битов нужно сдвигать.
	//		Биты выходящие за пределы разрядности теряются.
	//		Новые биты заполняются 0 (или 1, если тип знаковый (signed)).


	//			1 1 0
	//    >>
	//				2
	//	   =
	//			0 0 1

	printf ("Bitwise right shift by 2 bits: 6 >> 2 = %u\n", 6 >> 2);



	// Битовое исключающее "ИЛИ" (xor): принимает 2 целых числа. Результат целое число. 
	//		В результирующем числе биты 1 будут в тех разрядах, где стояли единицы ИЛИ в первом числе
	//						ИЛИ во втором, НО НЕ В ОБОИХ.


	//				1 1 0
	//    ^
	//		1 1 1 0 1 0 1
	//    =
	//      1 1 1 0 0 1 1 


	printf ("Bitwise 'XOR': 6 ^ 117 = %u\n", myValue ^ myValue2);
}